Intuition. Pour résoudre le problème de trouver le coût minimum pour convertir une chaîne à une autre en utilisant un ensemble de règles de conversion de caractères donnés, nous pouvons appliquer l'algorithme de Dijkstra. Tout d'abord, nous le modélisons comme un problème de traverse graphique où chaque caractère est un nœud, et chaque conversion entre les caractères représente une bordure dirigée et pondérée dans le graphique. Nous utilisons ensuite l'algorithme de Dijkstra pour trouver le chemin le plus court de chaque caractère de la chaîne source vers le caractère correspondant dans la chaîne cible en utilisant ces coûts de conversion.
Approche. Représentation du graphique: Créer un graphique de conversions de caractères.
Parcourir toutes les conversions:
Obtenez les indices de caractères `original` et `changed` et leur coût de conversion.
Ajouter les détails de la conversion au graphique.
Calcul du chemin le plus court: Définir une fonction pour exécuter l'algorithme de Dijkstra pour trouver le coût minimum de la conversion d'un caractère à tous les autres caractères.
Créer une file de priorité pour stocker les caractères avec leur coût de conversion, triés par coût.
Créer une liste pour stocker le coût de conversion minimum pour chaque caractère.
Traiter la file de priorité.
Explorez toutes les conversions possibles du caractère actuel.
Mettre à jour le coût s'il existe une conversion moins chère.
Retourne la liste des coûts minimaux de conversion du caractère à tous les autres.
Calculer les chemins les plus courtes pour toutes les conversions de caractères possibles.
Calcul des coûts: parcourir toutes les paires de caractères des chaînes source et cible:
Calculer le coût de conversion si les caractères sont différents.
Retourne moins un si la conversion n'est pas possible.
Accumuler les coûts de conversion.
Retourner le coût: Retourne le coût total de conversion minimum.
Complexité Complexité du temps: La complexité temporelle de cette solution est O du carré V, où V est le nombre de sommets dans le graphique. C'est parce que nous utilisons l'algorithme de Dijkstra pour trouver le chemin le plus court du caractère source au caractère cible. Dans le pire des cas, nous devons peut-être répéter tous les sommets du graphique. Complexité de l'espace : La complexité d'espace de cette solution est O de V plus E, où V est le nombre de sommets et E le nombre d'extrémités du graphique. C'est parce que nous stockons la représentation de la liste d'adjacence du graphique.
