import pyautogui
import time

start_time = time.time()

pyautogui.click(134, 860)
time.sleep(2)
pyautogui.click(810, 260)
pyautogui.moveTo(-20, -20, duration=0)
time.sleep(30)

pyautogui.write('adjacency_list: list[list[tuple[int, int]]] = [[] for _ in range(26)]', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.write('conversion_count = len(original)', interval = 0.05)
pyautogui.press("enter")
pyautogui.write('for conversion_index in range(conversion_count):', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.write('source_char_index = ord(original[conversion_index]) - ord("a")', interval = 0.05)
pyautogui.press("enter")
pyautogui.write('target_char_index = ord(changed[conversion_index]) - ord("a")', interval = 0.05)
pyautogui.press("enter")
pyautogui.write('conversion_cost = cost[conversion_index]', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.write('adjacency_list[source_char_index].append((target_char_index, conversion_cost))', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.press("backspace")
pyautogui.write('def dijkstra(start: int, adjacencyList: list[list[tuple[int, int]]]) -> list[float]:', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.write('priority_queue = [(0, start)]', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.write('min_costs = [float("inf")] * 26', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.write('while priority_queue:', interval = 0.05)
pyautogui.press("enter")
pyautogui.write('current_cost, current_char = heapq.heappop(priority_queue)', interval = 0.05)
pyautogui.press("enter")
pyautogui.write('if min_costs[current_char] != float("inf"):', interval = 0.05)
pyautogui.press("enter")
pyautogui.write('continue', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.press("backspace")
pyautogui.write('min_costs[current_char] = current_cost', interval = 0.05)
pyautogui.press("enter")
pyautogui.write('for target_char, conversion_cost in adjacencyList[current_char]:', interval = 0.05)
pyautogui.press("enter")
pyautogui.write('new_total_cost = current_cost + conversion_cost', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.write('if min_costs[target_char] == float("inf"):', interval = 0.05)
pyautogui.press("enter")
pyautogui.write('heapq.heappush(priority_queue, (new_total_cost, target_char))', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.press("backspace")
pyautogui.press("backspace")
pyautogui.press("backspace")
pyautogui.write('return min_costs', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.press("backspace")
pyautogui.write('min_conversion_costs = [dijkstra(start_char, adjacency_list) for start_char in range(26)]', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.write('total_cost = 0', interval = 0.05)
pyautogui.press("enter")
pyautogui.write('for s, t in zip(source, target):', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.write('if s != t:', interval = 0.05)
pyautogui.press("enter")
pyautogui.write('char_conversion_cost = min_conversion_costs[ord(s) - ord("a")][ord(t) - ord("a")]', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.write('if char_conversion_cost == float("inf"):', interval = 0.05)
pyautogui.press("enter")
pyautogui.write('return -1', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.press("backspace")
pyautogui.write('total_cost += int(char_conversion_cost)', interval = 0.05)
pyautogui.sleep(10)
pyautogui.press("enter")
pyautogui.press("enter")
pyautogui.press("backspace")
pyautogui.press("backspace")
pyautogui.write('return total_cost', interval = 0.05)
time.sleep(3)

pyautogui.keyDown("command")
pyautogui.press("enter")
pyautogui.keyUp("command")

end_time = time.time()

# Calculate and print the elapsed time
elapsed_time = end_time - start_time
print(f"Elapsed time: {elapsed_time} seconds")
